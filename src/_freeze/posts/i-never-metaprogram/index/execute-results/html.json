{
  "hash": "6d024ffe9716bb0fb69063a5226863f2",
  "result": {
    "markdown": "---\ntitle: \"I never metaprogram I didn't write\"\ndate: 2023-11-16\ncategories:\n  - R\n  - programming\n  - Quarto\nbibliography: \"../../bib/blog-refs.bib\"\n---\n\n\nIn [PSYCH 490](https://psu-psychology.github.io/psych-490-reproducibility-2023-fall/) this week we discussed a paper [@Chopik2018-wx] that surveyed undergraduate students' knowledge about open science practices before and after a short 1-hour lecture.\n\nI got a bee in my bonnet about how to create a set of similar plots *programmatically*, using metaprogramming.\nThe idea is to write code that creates 'knittable' markdown so that when the full document is rendered, you get nice looking HTML or PDF or whatever your output format happens to be.\n\nIt's a bear to program though, because you have to keep in mind what sort of text is considered properly formatted input to each stage of the process.\nIn fact, a functional programming approach is almost required, at least for mere mortals like me.\nAnd there are some tricks to feeding functions lists of variables embedded in a data frame in a way that they can be used in functions like `ggplot()` and the `dplyr` family.\nNevertheless, he persisted.\nAnd in the end, I got it to work.\n\nHere is a very brief example to demonstrate that I can do it again.\n\nFirst, I create two helper functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressPackageStartupMessages(library(tidyverse))\n\nmy_freq_plot <- function(data = mtcars, var) {\n  data |>\n    ggplot() +\n    aes(.data[[var]]) +\n    geom_freqpoly(na.rm = TRUE,\n                  show.legend = FALSE,\n                  bins = 30)\n}\n\nreturn_section <- function(data, var) {\n  chunk_hdr <- knitr::knit_expand(text = c(\"### Plot of: `{{this_var}}`\",\n                                           \"\\n\"),\n                                  this_var = var)\n  \n  # Build fig.cap from ground up\n  fig_name <- paste0(\"fig-dist-\", var)\n  fig_cap <- paste0(\"'Plot of responses to \", var, \"'\")\n  fig_caption <- paste0(\"fig.cap = \", fig_cap)\n  \n  plot_chunk_hdr <- paste0(\"```{r \", fig_name, \", echo = FALSE, warning = FALSE, \", fig_caption, \"}\")\n  \n  plot_chunk <- c(plot_chunk_hdr,\n                   \"print(my_freq_plot(data, var))\",\n                  \"```\")\n\n  knitr::knit_child(\n    text = c(chunk_hdr, plot_chunk),\n    envir = environment(),\n    quiet = TRUE\n  )\n}\n```\n:::\n\n\nThen I create a set of figures from the `mtcars` database.\nTo keep things simple, I'll just pick the first three variables.\n\n\n\n```{.r .cell-code}\nthese_vars <- names(mtcars)[1:3]\n\nres <- invisible(lapply(these_vars, return_section, data = mtcars))\ncat(unlist(res), sep = \"\\n\")\n```\n\n\n### Plot of: `mpg`\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Plot of responses to mpg](index_files/figure-html/fig-dist-mpg-1.png){#fig-dist-mpg width=672}\n:::\n:::\n\n### Plot of: `cyl`\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Plot of responses to cyl](index_files/figure-html/fig-dist-cyl-1.png){#fig-dist-cyl width=672}\n:::\n:::\n\n### Plot of: `disp`\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Plot of responses to disp](index_files/figure-html/fig-dist-disp-1.png){#fig-dist-disp width=672}\n:::\n:::\n\n\nThis could certainly be optimized.\nBut it works, and it's enough of an example that I can use it again in the future.\nIn fact, I tweaked this example ever so slightly from the one I used for my class website.\nThat, to me, is reproducibility.\n\nAnd, if this was a document that generated a table of contents, creating level 2 (`## `) or 3 (`### `) headers this way would automatically add the subsection titles to the TOC.\nSweet, eh?\n\nSome observations about what finally worked are listed below.\n\n::: {.callout-note title=\"*Post hoc* thoughts\"}\n\nThe keys were as follows:\n\n1. In `return_chunk()`, generate separate text strings for the header (`chunk_hdr`) and the plot chunk (`plot_chunk`). See also the sequence for building a suitable string for `fig.cap`.\n\n2. Combine these separate pieces within `knitr::knit_child()` with the `text=...` parameter.\n\n3. In `my_freq_plot()`, use the `aes(.data[[var]])` syntax to turn the string value for `var` into an unquoted variable in the dataset. Remember, the input to `return_section()` is an array of variable names from `mtcars` as strings.\n\n4. In the chunk that generates the markdown, make sure to add `results=\"asis\"`.\n\n*Bottom line*: It's always better to bite off smaller chunks.\n\nAnd big props to [@Rodrigues2023-wa] for getting me started on this particular journey.\n\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}